// In this we prit what the max amount of proofit person1 can get if both play optimal.

//1) without Dynamic

#include <bits/stdc++.h>
using namespace std;

int dp[2][50][50];
int go(int l,int h,int a[],int f)
{
    if(l==h-1 && f==1)  return max(a[l],a[h]);
    if(l==h-1 && f==0)  return min(a[l],a[h]);
    
    int m=0;
    if(f==1)
    {
        m=a[l]+go(l+1,h,a,0);
        m=max(m,a[h]+go(l,h-1,a,0));
        return m;
    }
    else
    {
        m=go(l+1,h,a,1);
        m=min(m,go(l,h-1,a,1));
        return m;
    }
}

int main() 
{
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)  cin>>a[i];
    
	cout<<go(0,n-1,a,1);
	return 0;
}




//2) With Dynamic

#include <bits/stdc++.h>
using namespace std;

int dp[2][50][50];
int go(int l,int h,int a[],int f)
{
    if(l==h-1 && f==1)  return max(a[l],a[h]);
    if(l==h-1 && f==0)  return min(a[l],a[h]);
    if(dp[f][l][h]!=0) return dp[f][l][h];    // To convert to dp
    
    int m=0;
    if(f==1)
    {
        m=a[l]+go(l+1,h,a,0);
        m=max(m,a[h]+go(l,h-1,a,0));
        return dp[f][l][h]=m;               // To convert to dp
    }
    else
    {
        m=go(l+1,h,a,1);
        m=min(m,go(l,h-1,a,1));
        return dp[f][l][h]=m;                // To convert to dp
    }
}

int main() 
{
    int n;
    cin>>n;
    int a[n];
    for(int i=0;i<n;i++)  cin>>a[i];
    
	cout<<go(0,n-1,a,1);
	return 0;
}


Input:-(Input this in both case and see difference in runtime)
29
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
